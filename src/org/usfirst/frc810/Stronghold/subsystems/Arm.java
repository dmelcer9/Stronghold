// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc810.Stronghold.subsystems;

import org.usfirst.frc810.Stronghold.RobotMap;
import org.usfirst.frc810.Stronghold.commands.*;
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.CANTalon;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.*;

/**
 *
 */
public class Arm extends Subsystem {
 
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
    public static final double ZeroValue = 0;
    public static final double VertValue = 5;
    public static final double MinAngle = -15;
    public static final double MaxAngle = 90;
    public static final double RampValue = 15;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final Solenoid pusher = RobotMap.armPusher;
    private final CANTalon leftCannon = RobotMap.armLeftCannon;
    private final CANTalon rightCannon = RobotMap.armRightCannon;
    private final Solenoid armStand = RobotMap.armArmStand;
    private final CANTalon secondaryHinge = RobotMap.armSecondaryHinge;
    private final CANTalon hinge = RobotMap.armHinge;
    private final AnalogPotentiometer armPot = RobotMap.armArmPot;
    private final PIDController armPID = RobotMap.armArmPID;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    
    public void rotateToAngle(double angle) {
    	armPID.setSetpoint(angleToPotValue(angle));
    	armPID.enable();
    }
    
    public boolean isStandOpen(){
    	return armStand.get();
    }
    
    public void manualMove(double value){
    	armPID.disable();
    	double angle = getAngle();
    	if(value > 0){
    		if(angle > MaxAngle){
    			value = 0;
    		}
    	} else if(value < 0){
    		if(angle < MinAngle){
    			value = 0;
    		}
    	}
    	hinge.set(value);
    }

	public double getAngle() {
		return potValueToAngle(armPot.get());
	}
    
    public void weightedManual(double value){
    	armPID.disable();
    	double angle = getAngle();
    	if(value > 0){
    		if(angle>MaxAngle){
    			value = 0;
    		}
    		else if(angle>(MaxAngle - RampValue)){
    			value *= .7;
    		}
    	} else if(value < 0){
    		if(angle<MinAngle){
    			value = 0;
    		} else if(angle<(MinAngle + RampValue)){
    			value *= .7;
    		}
    	}
    	hinge.set(value);
    	
    }
    
    public boolean PIDOnTarget(){
    	return armPID.onTarget();
    }
     
    public double angleToPotValue(double angle){
    	double voltsPerDegree = (VertValue-ZeroValue) / 90;
    	return ZeroValue + (angle * voltsPerDegree); 
    }
    
    public double potValueToAngle(double potVal){
    	double voltsPerDegree = (VertValue-ZeroValue) / 90;
    	return (potVal-ZeroValue) / voltsPerDegree;
    }
    
    //NOTE: Negative speed = intake
    //Positive speed = shoot
    
    public void setShooterSpeed(double rpm){
    	leftCannon.set(rpm);
    	rightCannon.set(-rpm);
    }

    public void stopShooter(){
    	setShooterSpeed(0);
    }
    
    public void openStand(){
    	armStand.set(true);
    }
    
    public void closeStand(){
    	armStand.set(false);
    }
    
    public void pushBall(){
    	pusher.set(true);
    	Timer.delay(.25);
    	pusher.set(false);
    }
    
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
}

