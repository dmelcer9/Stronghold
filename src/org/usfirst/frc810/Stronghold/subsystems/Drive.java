// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc810.Stronghold.subsystems;

import org.usfirst.frc810.Stronghold.Robot;
import org.usfirst.frc810.Stronghold.RobotMap;
import org.usfirst.frc810.Stronghold.commands.*;

import com.kauailabs.navx.frc.AHRS;

import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;


/**
 *
 */
public class Drive extends Subsystem {
	
	
	public Drive(){
		super();
		RobotMap.drivePID = new PIDController(.003, 0.0, 0.0, 0.0, gyro, this::outputArcadeRotation, .02);
		pid = RobotMap.drivePID;
		pid.setInputRange(-180, 180);
        pid.setOutputRange(-1, 1);
        pid.setAbsoluteTolerance(2);
        pid.setContinuous(true);
        
        
        LiveWindow.addActuator("Drive", "PID", pid);
	}
	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController left = RobotMap.driveLeft;
    private final SpeedController right = RobotMap.driveRight;
    private final RobotDrive tankDrive = RobotMap.driveTankDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    private final AHRS gyro = RobotMap.driveGyro;
    private final PIDController pid;
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    
    public void tankDrive(double left, double right){
    	tankDrive.tankDrive(left, right);
    }
    
    public void enablePIDRotation(){
    	pid.reset();
    	pid.enable();
    }
    
    public void disablePIDRotation(){
    	pid.disable();
    }
    
    public void setPIDAngle(double angle){
    	pid.setSetpoint(angle);
    }
    
    double PIDSpeed = 0;
    public void outputArcadeRotation(double rotVal){
    	arcadeDrive(PIDSpeed, -rotVal);
    }
    
    public void setSpeedForArcadePID(double speed){
    	PIDSpeed = speed;
    }
    
    public void arcadeDrive(double straight, double turn){
    	tankDrive.arcadeDrive(straight, turn);
    }
    
    public void timedArcadeDrive(double straight, double turn, double time){
    	arcadeDrive(straight, turn);
    	Timer.delay(time);
    	arcadeDrive(0, 0);
    	}
    
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new TankDriveCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
}

