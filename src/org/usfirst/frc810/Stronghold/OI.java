// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc810.Stronghold;

import org.usfirst.frc810.Stronghold.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.buttons.JoystickButton;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick leftDrive;
    public Joystick rightDrive;
    public JoystickButton lowGoalButton;
    public JoystickButton highGoalButton;
    public JoystickButton towerButton;
    public JoystickButton lowBarButton;
    public JoystickButton portcullisLowButton;
    public JoystickButton portcullisHighButton;
    public JoystickButton sallyPortStartButton;
    public JoystickButton sallyPortOpenButton;
    public JoystickButton drawbridgeStartButton;
    public JoystickButton drawbridgeOpenButton;
    public JoystickButton intakeButton;
    public Joystick gamepad;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        gamepad = new Joystick(2);
        
        intakeButton = new JoystickButton(gamepad, 2);
        intakeButton.whileHeld(new IntakeBall());
        drawbridgeOpenButton = new JoystickButton(gamepad, 7);
        drawbridgeOpenButton.whileHeld(new DrawbridgeOpen());
        drawbridgeStartButton = new JoystickButton(gamepad, 5);
        drawbridgeStartButton.whenPressed(new DrawbridgeStart());
        sallyPortOpenButton = new JoystickButton(gamepad, 4);
        sallyPortOpenButton.whenPressed(new SallyPortOpen());
        sallyPortStartButton = new JoystickButton(gamepad, 1);
        sallyPortStartButton.whenPressed(new SallyPortStart());
        portcullisHighButton = new JoystickButton(gamepad, 3);
        portcullisHighButton.whenPressed(new PortcullusHigh());
        portcullisLowButton = new JoystickButton(gamepad, 3);
        portcullisLowButton.whenReleased(new PortcullusLow());
        lowBarButton = new JoystickButton(gamepad, 10);
        lowBarButton.whenPressed(new RotateArmForLowBar());
        towerButton = new JoystickButton(gamepad, 9);
        towerButton.whenPressed(new ScaleTower());
        highGoalButton = new JoystickButton(gamepad, 6);
        highGoalButton.whenPressed(new HighGoal());
        lowGoalButton = new JoystickButton(gamepad, 8);
        lowGoalButton.whenPressed(new LowGoal());
        rightDrive = new Joystick(1);
        
        leftDrive = new Joystick(0);
        


        // SmartDashboard Buttons
        SmartDashboard.putData("TankDriveCommand", new TankDriveCommand());
        SmartDashboard.putData("LowGoal", new LowGoal());
        SmartDashboard.putData("HighGoal", new HighGoal());
        SmartDashboard.putData("ScaleTower", new ScaleTower());
        SmartDashboard.putData("RotateArmForLowBar", new RotateArmForLowBar());
        SmartDashboard.putData("PortcullusLow", new PortcullusLow());
        SmartDashboard.putData("PortcullusHigh", new PortcullusHigh());
        SmartDashboard.putData("DrawbridgeStart", new DrawbridgeStart());
        SmartDashboard.putData("DrawbridgeOpen", new DrawbridgeOpen());
        SmartDashboard.putData("SallyPortStart", new SallyPortStart());
        SmartDashboard.putData("SallyPortOpen", new SallyPortOpen());
        SmartDashboard.putData("IntakeBall", new IntakeBall());
        SmartDashboard.putData("CalibrateArmAngle", new CalibrateArmAngle());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getLeftDrive() {
        return leftDrive;
    }

    public Joystick getRightDrive() {
        return rightDrive;
    }

    public Joystick getGamepad() {
        return gamepad;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

