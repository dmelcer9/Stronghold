// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc810.Stronghold;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.CANTalon.TalonControlMode;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CANTalon;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveLeft;
    public static SpeedController driveRight;
    public static RobotDrive driveTankDrive;
    public static Solenoid shooterPusher;
    public static CANTalon shooterLeftCannon;
    public static CANTalon shooterRightCannon;
    public static CANTalon armHinge;
    public static CANTalon armExtender;
    public static DigitalInput armBottomLimitSwitch;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveLeft = new Spark(0);
        LiveWindow.addActuator("Drive", "Left", (Spark) driveLeft);
        
        driveRight = new Spark(1);
        LiveWindow.addActuator("Drive", "Right", (Spark) driveRight);
        
        driveTankDrive = new RobotDrive(driveLeft, driveRight);
        
        driveTankDrive.setSafetyEnabled(true);
        driveTankDrive.setExpiration(0.1);
        driveTankDrive.setSensitivity(0.5);
        driveTankDrive.setMaxOutput(1.0);

        shooterPusher = new Solenoid(1, 0);
        LiveWindow.addActuator("Shooter", "Pusher", shooterPusher);
        
        shooterLeftCannon = new CANTalon(2);
        LiveWindow.addActuator("Shooter", "LeftCannon", shooterLeftCannon);
        
        shooterRightCannon = new CANTalon(3);
        LiveWindow.addActuator("Shooter", "RightCannon", shooterRightCannon);
        
        armHinge = new CANTalon(4);
        LiveWindow.addActuator("Arm", "Hinge", armHinge);
        
        armExtender = new CANTalon(5);
        LiveWindow.addActuator("Arm", "Extender", armExtender);
        
        armBottomLimitSwitch = new DigitalInput(0);
        LiveWindow.addSensor("Arm", "BottomLimitSwitch", armBottomLimitSwitch);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        
        shooterLeftCannon.changeControlMode(TalonControlMode.Speed);
    	shooterRightCannon.changeControlMode(TalonControlMode.Speed);
    	
    	
   
    }
}
