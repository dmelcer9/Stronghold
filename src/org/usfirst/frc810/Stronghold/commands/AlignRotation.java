// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc810.Stronghold.commands;

import edu.wpi.first.wpilibj.command.Command;

import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;

import org.usfirst.frc810.Stronghold.Robot;
import org.usfirst.frc810.Stronghold.RobotMap;

/**
 *
 */
public class AlignRotation extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public AlignRotation() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.drive);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    Future<Double> angleCorrection;
    
    // Called just before this Command runs the first time
    protected void initialize() {
    	angleCorrection = Robot.tcp.getAngleCorrection();
    }

    boolean set = false;
    boolean finished = false;
    
    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	if(!set && angleCorrection.isDone()){
    		double angle;
			try {
				angle = angleCorrection.get();
			} catch (InterruptedException | ExecutionException e) {
				angle = Double.NaN;
				e.printStackTrace();
			}
			
    		if(Double.isNaN(angle)||Math.abs(angle)>45){
    			finished = true;
    			return;
    		}
    		
    		Robot.drive.setSpeedForArcadePID(0);
    		double setAngle = RobotMap.driveGyro.getAngle() + angle;
    		if(setAngle < -180) setAngle += 360;
    		else if(setAngle > 180) setAngle -= 360;
    		Robot.drive.setPIDAngle(setAngle);
    		//Robot.drive.enablePIDRotation();
    		set = true;
    	}
    	
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return finished||(set&&RobotMap.drivePID.onTarget());
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.drive.disablePIDRotation();
    	if(!angleCorrection.isDone()){
    		angleCorrection.cancel(true);
    	}
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
}
